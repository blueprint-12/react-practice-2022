//scope chain에 대한 얘기를 하기 위한 예시

//내부에있는 inner함수를 "중첩함수" 라고 부르고
//외부에 있는 outer 함수를 "외부함수"라고 부릅니다.
var x = "나는 전역 x야";
function outer() {
  var y = "나는 outer함수의 지역 y야.";
  console.log(x); // 나는 전역 x야
  console.log(y); // 나는 outer함수의 지역 y야

  function inner() {
    var x = "나는 inner함수의 지역x야";
    console.log(x); //나는 inner함수의 지역 x야
    console.log(y); //나는 outer함수의 지역y야
  }
  inner();
}
outer();

console.log(x); //나는 전역x야
console.log(y); // 참조에러(ReferenceError)

// 스코프 체인에서 참조를 할 때는 무조건 위로만 올라간다.
// 그렇기 때문에 우리가 하위 스코프에서 상위 스코프에 있는 변수는 참조할 수 있지만
// 그 역방향은 참조할 수 없게 되는 것입니다.(스코프 체인의 단방향성 때문)
// inner 지역 스코프 -> outer 지역 스코프 - 전역 스코프

//스코프에는 레벨이 있는데
//1. 블록 레벨 스코프 e.g) if문, for문, 함수... -> 대부분 프로그래밍 언어
//2. 함수 레벨 스코프 e.g) only 함수 -> 자바스크립트(블록레벨 스코프를 가지고 싶어서 만든 것이 es6의 let, const)

//상위 스코프: 상위 스코프의 결정은
//1. 함수가 호출되는 시점에서 결정 -> 동적 스코프
//2. 함수가 정의되는 시점에 결정-> 정적 스코프(===렉시컬 스코프) , JS는 여기에 해당
// JS에서 함수는 태어나게 되면(만들어지면) 자신의 내부 슬롯에 "상위 스코프 참조"를 저장한다.
